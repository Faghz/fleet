// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: session.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteSessionByID = `-- name: DeleteSessionByID :exec
DELETE FROM session
WHERE
    id = $1
    AND user_id = $2
`

type DeleteSessionByIDParams struct {
	ID     string `json:"id"`
	UserID string `json:"user_id"`
}

func (q *Queries) DeleteSessionByID(ctx context.Context, arg DeleteSessionByIDParams) error {
	_, err := q.db.Exec(ctx, deleteSessionByID, arg.ID, arg.UserID)
	return err
}

const getSessionByEntityId = `-- name: GetSessionByEntityId :one
SELECT
    id,
    user_id,
    expires_at,
    created_at,
    created_by,
    updated_at,
    updated_by,
    deleted_at,
    deleted_by
FROM session
WHERE
    id = $1
    AND user_id = $2
    AND expires_at > NOW()
    AND deleted_at IS NULL
LIMIT 1
`

type GetSessionByEntityIdParams struct {
	ID     string `json:"id"`
	UserID string `json:"user_id"`
}

func (q *Queries) GetSessionByEntityId(ctx context.Context, arg GetSessionByEntityIdParams) (Session, error) {
	row := q.db.QueryRow(ctx, getSessionByEntityId, arg.ID, arg.UserID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const insertSession = `-- name: InsertSession :exec
INSERT INTO session (
    id,
    user_id,
    expires_at,
    created_by,
    updated_by
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
`

type InsertSessionParams struct {
	ID        string             `json:"id"`
	UserID    string             `json:"user_id"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
	CreatedBy string             `json:"created_by"`
	UpdatedBy pgtype.Text        `json:"updated_by"`
}

func (q *Queries) InsertSession(ctx context.Context, arg InsertSessionParams) error {
	_, err := q.db.Exec(ctx, insertSession,
		arg.ID,
		arg.UserID,
		arg.ExpiresAt,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	return err
}
